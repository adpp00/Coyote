######################################################################################
# This file is part of the Coyote <https://github.com/fpgasystems/Coyote>
# 
# MIT Licence
# Copyright (c) 2025, Systems Group, ETH Zurich
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
######################################################################################

# @brief Generates Coyote bitstreams, both full (including the static and shell layer),
# as well as partial, including only the shell (.bin files) for dynamic run-time reconfiguration
# Additionally, generates ILA config files to be used in Vivado HW manager.

if {[catch {
    
########################################################################################################

# Config
source "${CMAKE_BINARY_DIR}/base.tcl"

########################################################################################################
# GENERATE BITSTREAMS
########################################################################################################
puts "[color $clr_flow "** Starting shell bitstream generation ..."]"
puts "[color $clr_flow "**"]"

file mkdir "$bit_dir"

if {$cfg(en_pr) eq 0} {
    open_checkpoint "$dcp_dir/shell_routed.dcp"
    if {$cfg(build_static) eq 1} {
        # Coyote top; including the shell and the static layer
        write_bitstream -force -no_partial_bitfile "$bit_dir/cyt_top.bit"
        write_debug_probes -no_partial_ltxfile -force "$bit_dir/cyt_top.ltx"
    } else {
        # Partial shell bitstream, without static layer (used for dynamic reconfiguration) 
        write_bitstream -force -bin_file -no_binary_bitfile -cell "inst_shell" "$bit_dir/shell_top.bit"
        write_debug_probes -force -quiet -cell "inst_shell" "$bit_dir/shell_top.ltx"

        # Static layer including shell layer (user for initial loading of the bitstream)
        write_bitstream -force -no_partial_bitfile "$bit_dir/cyt_top.bit"
        write_debug_probes -no_partial_ltxfile -force "$bit_dir/cyt_top.ltx"
    }
    
    close_project
} else {    
    # Partial bitstreams; one for each application and configuration
    for {set i 0}  {$i < $cfg(n_config)} {incr i} {
        open_checkpoint "$dcp_dir/config_$i/shell_routed_c$i.dcp"
        file mkdir "$bit_dir/config_$i"
        for {set j 0}  {$j < $cfg(n_reg)} {incr j} {
            write_bitstream -force -no_binary_bitfile -bin_file -cell "inst_shell/inst_dynamic/inst_user_wrapper_$j" "$bit_dir/config_$i/vfpga_c$i\_$j.bit"
            write_debug_probes -quiet -force -cell "inst_shell/inst_dynamic/inst_user_wrapper_$j" "$bit_dir/config_$i/vfpga_c$i\_$j.ltx"
        }
        close_project
    }

    if {$cfg(build_shell) eq 1} {
        # Partial shell bitstream, without static layer (used for dynamic reconfiguration) 
        open_checkpoint "$dcp_dir/shell_recombined.dcp"
        write_bitstream -force -bin_file -no_binary_bitfile -cell "inst_shell" "$bit_dir/shell_top.bit"
        write_debug_probes -force -quiet -cell "inst_shell" "$bit_dir/shell_top.ltx"

        # For completness sake, the static layer including the shell layer (user for initial loading of the bitstream)
        write_bitstream -force -no_partial_bitfile "$bit_dir/cyt_top.bit"
        write_debug_probes -no_partial_ltxfile -force "$bit_dir/cyt_top.ltx"

        close_project
    }
}

########################################################################################################
# BITSTREAM GENERATION COMPLETED
########################################################################################################
puts ""
puts "[color $clr_cmplt "**"]"
puts "[color $clr_cmplt "** Shell bitstreams generated"]"
puts "[color $clr_cmplt "**"]"
puts "" 

########################################################################################################

} errorstring]} {
    puts "[color $clr_error "** CERR: $errorstring"]"
    puts "[color $clr_error "**"]"
    exit 1
}

exit 0