######################################################################################
# This file is part of the Coyote <https://github.com/fpgasystems/Coyote>
# 
# MIT Licence
# Copyright (c) 2025, Systems Group, ETH Zurich
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
######################################################################################

# @brief Compiles all user-defined HLS kernels and exports them as IPs

#########################################################
#                   HLS COMPILATION                     #
#########################################################

if {[catch {
    
########################################################################################################
# Source config
source "${CMAKE_BINARY_DIR}/base.tcl"

if {$cfg(load_apps) eq 1} {
    puts "[color $clr_flow "** HLS compilation ..."]"
    puts "[color $clr_flow "**"]"

    # Iterate through all the applications
    ${APPS_ALL}

    for {set i 0} {$i < $cfg(n_config)} {incr i} {
        for {set j 0} {$j < $cfg(n_reg)} {incr j} {

            set tmp_val "[format "\$vfpga_c$i\_$j"]" 
            set tmp_path "[format "%s" $tmp_val]"
            set cmd "[format "set tmp_path $tmp_path"]"
            eval $cmd

            # Compile all HLS cores
            if {[file isdirectory "${CMAKE_SOURCE_DIR}/$tmp_path/hls"]} {
                set krnls [glob -nocomplain -tails -directory "${CMAKE_SOURCE_DIR}/$tmp_path/hls" -type d *]

                foreach krnl $krnls {
                    # Copy all files
                    file mkdir "$build_dir/$project\_config_$i/user\_c$i\_$j/hdl/ext/$krnl\_hls"
                    set files_hdl [glob -nocomplain "${CMAKE_SOURCE_DIR}/$tmp_path/hls/$krnl/*.hpp" "${CMAKE_SOURCE_DIR}/$tmp_path/hls/$krnl/*.cpp" "${CMAKE_SOURCE_DIR}/$tmp_path/hls/$krnl/*.h" "${CMAKE_SOURCE_DIR}/$tmp_path/hls/$krnl/*.c"]
                    if {[llength $files_hdl]} {
                        file copy -force {*}$files_hdl "$build_dir/$project\_config_$i/user\_c$i\_$j/hdl/ext/$krnl\_hls"
                    }

                    ########################################################################################################
                    # CREATE PROJECT
                    ########################################################################################################
                    cd $build_dir/$project\_config_$i/user\_c$i\_$j/hdl/ext/$krnl\_hls
                    open_project "$krnl\_c$i\_$j"
                    open_solution "solution1"
                    set_part ${FPGA_PART}
                    
                    if {$cfg(en_uclk) eq 1} {
                        create_clock -period "$cfg(uclk_p)" -name default
                    } else {
                        create_clock -period "$cfg(aclk_p)" -name default
                    }
                    set_clock_uncertainty "$cfg(hls_clk_u)%" default

                    ########################################################################################################
                    # ADD FILES
                    ########################################################################################################
                    set_top "$krnl"
                    add_files "$build_dir/$project\_config_$i/user\_c$i\_$j/hdl/ext/$krnl\_hls/$krnl.cpp" -cflags "-std=c++11 -I $build_dir/$project\_config_$i/user\_c$i\_$j/hdl/ext/$krnl\_hls"

                    ########################################################################################################
                    # HLS SYNTHESIS & EXPORT
                    ########################################################################################################
                    csynth_design

                    if {[file exists ${IPREPO_DIR}/$krnl\_hls_ip]} {
                        puts "[color $clr_rest "** WARNING: $krnl already exported as IP; overwriting previous IP..."]"
                    } 

                    export_design -format ip_catalog -ipname "$krnl\_hls_ip" -display_name "$krnl\_hls_ip" -description "" -vendor "user.org" -version "1.0"

                    file mkdir ${IPREPO_DIR}
                    file delete -force ${IPREPO_DIR}/$krnl\_hls_ip
                    file copy -force $krnl\_c$i\_$j/solution1/impl/ip ${IPREPO_DIR}/$krnl\_hls_ip
                }
            }
        }
    }
}

########################################################################################################

} errorstring]} {
    puts "[color $clr_error "** CERR: $errorstring"]"
    puts "[color $clr_error "**"]"
    exit 1
}

exit 0
