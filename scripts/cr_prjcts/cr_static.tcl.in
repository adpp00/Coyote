######################################################################################
# This file is part of the Coyote <https://github.com/fpgasystems/Coyote>
# 
# MIT Licence
# Copyright (c) 2025, Systems Group, ETH Zurich
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
######################################################################################

# @brief Creates a Vivado project for the static layer, separate from the shell.
# Additionally, creates and configures all the necessary IPs for host DMA.

if {[catch {
    
########################################################################################################

# Config & environment
unset ::env(PYTHONPATH)
unset ::env(PYTHONHOME)

source "${CMAKE_BINARY_DIR}/base.tcl"

########################################################################################################
# CREATE PROJECT
########################################################################################################
puts "[color $clr_flow "** Creating static project ..."]"
puts "[color $clr_flow "**"]"

# Create project
set proj_dir "$build_dir/$project\_static"
create_project $project $proj_dir -part $part -force
set proj [current_project]
set_property IP_REPO_PATHS $lib_dir [current_fileset]
update_ip_catalog

set_msg_config -id {Vivado 12-2924} -suppress
set_msg_config -id {IP_Flow 19-4832} -suppress

file mkdir "$dcp_dir/static"
file mkdir "$rprt_dir/static"
file mkdir "$log_dir/static"

########################################################################################################
# SET PROJECT PROPERTIES
########################################################################################################
#set_property "board_part" $board_part                      $proj
set_property "default_lib" "xil_defaultlib"                 $proj
set_property "ip_cache_permissions" "read write"            $proj
set_property "ip_output_repo" "$proj_dir/$project.cache/ip" $proj
set_property "sim.ip.auto_export_scripts" "1"               $proj
set_property "target_language" "Verilog"                    $proj
set_property "simulator_language" "Mixed"                   $proj
set_property "xpm_libraries" "XPM_CDC XPM_MEMORY"           $proj

########################################################################################################
# CREATE & ADD FILES
########################################################################################################
file mkdir "$proj_dir/hdl/static"

# Call write HDL scripts
proc call_write_hdl {r_path op c_cnfg c_reg} {
    set output [exec /usr/bin/python3 "$r_path/write_hdl.py" $op $c_cnfg $c_cnfg]
    puts $output
}
call_write_hdl $build_dir 0 0 0

# Add source files
add_files "$hw_dir/hdl/pkg"
add_files "$hw_dir/hdl/static"
add_files "$proj_dir/hdl/static"

# DEPRECATED --- ENZIAN
# if {$cfg(fdev) eq "enzian"} {
#     add_files "$hw_dir/hdl/eci"
#     add_files "$hw_dir/enzian_eci_transport/hdl"
#     add_files "$hw_dir/enzian_eci_toolkit/hdl"
# }

# Top level
set_property "top" "cyt_top" [current_fileset]

# Constraints
add_files -norecurse -fileset [get_filesets constrs_1] "$hw_dir/constraints/$cfg(fdev)/static/synth"
set_property used_in_implementation false [get_files -of_objects [get_filesets constrs_1]]

# Create a project-local constraint file to take debugging constraints that we don't want to propagate to the repository.
file mkdir "$proj_dir/$project.srcs/constrs_1"
close [ open "$proj_dir/$project.srcs/constrs_1/local.xdc" w ]

set_property target_constrs_file "$proj_dir/$project.srcs/constrs_1/local.xdc" [current_fileset -constrset]

########################################################################################################
# STATIC INFRASTRUCTURE
########################################################################################################
# DEPRECATED --- ENZIAN
# if {$cfg(fdev) eq "enzian"} {
#     source "$scripts_dir/ip_inst/eci_infrastructure.tcl" -notrace
# } else {
#     source "$scripts_dir/ip_inst/pci_infrastructure.tcl" -notrace
# }
source "$scripts_dir/ip_inst/pci_infrastructure.tcl" -notrace

########################################################################################################
# STATIC BLOCK DESIGN
########################################################################################################
# DEPRECATED --- ENZIAN
# if {$cfg(fdev) eq "enzian"} {
#     source "$scripts_dir/bd/cr_eci.tcl" -notrace
#     cr_bd_design_static ""
#     set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_static.bd ]
# } else {
#     source "$scripts_dir/bd/cr_pci.tcl" -notrace
#     cr_bd_design_static ""
#     set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_static.bd ]
# }

source "$hw_dir/bd/cr_pci.tcl" -notrace
cr_bd_design_static ""
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_static.bd ]

########################################################################################################
# STATIC PROJECT CREATED
########################################################################################################
close_project
puts "[color $clr_flow "** Static project created"]"
puts "[color $clr_flow "**"]"

########################################################################################################

} errorstring]} {
    puts "[color $clr_error "** CERR: $errorstring"]"
    puts "[color $clr_error "**"]"
    exit 1
}

exit 0
