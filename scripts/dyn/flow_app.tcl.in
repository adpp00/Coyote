######################################################################################
# This file is part of the Coyote <https://github.com/fpgasystems/Coyote>
# 
# MIT Licence
# Copyright (c) 2025, Systems Group, ETH Zurich
# All rights reserved.
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
######################################################################################

# @brief Script which links a new user application against an existing (routed and locked) shell
# Additionally, it runs implementation on the new design.

if {[catch {
    
########################################################################################################

# Config
source "${CMAKE_BINARY_DIR}/base.tcl"

########################################################################################################
# APP COMPILATION
########################################################################################################

for {set i 0}  {$i < $cfg(n_config)} {incr i} {
    create_project -in_memory -part $part

    puts "[color $clr_flow "** App compilation started, config $i ..."]"
    puts "[color $clr_flow "**"]"

    # Config i impl
    add_file "$cfg(shell_path)/checkpoints/shell_routed_locked.dcp"
    for {set j 0}  {$j < $cfg(n_reg)} {incr j} {
        add_files "$dcp_dir/config_$i/user_synthed_c$i\_$j.dcp"
        set cmd "set_property SCOPED_TO_CELLS { inst_shell/inst_dynamic/inst_user_wrapper_$j } \[get_files \"$dcp_dir/config_$i/user_synthed_c$i\_$j.dcp\"]"
        eval $cmd
    }
    add_files -fileset [get_filesets constrs_1] "$hw_dir/constraints/$cfg(fdev)/dynamic/impl"

    # Link design
    set cmd "link_design -mode default -reconfig_partitions { "
    for {set j 0}  {$j < $cfg(n_reg)} {incr j} {
        append cmd " inst_shell/inst_dynamic/inst_user_wrapper_$j "
    }
    append cmd " } -part $part -top cyt_top"
    eval $cmd
    write_checkpoint -force "$dcp_dir/config_$i/shell_linked_c$i.dcp"

    # Compilation
    if {$cfg(build_opt) eq 1} {
        opt_design -directive Explore
    } else {
        opt_design
    }
    write_checkpoint -force "$dcp_dir/config_$i/shell_opted_c$i.dcp"

    if {$cfg(build_opt) eq 1} {
        place_design -directive Auto_1
    } else {
        place_design
    }
    write_checkpoint -force "$dcp_dir/config_$i/shell_placed_c$i.dcp"

    if {$cfg(build_opt) eq 1} {
        phys_opt_design -directive AggressiveExplore
    } else {
        phys_opt_design
    }
    write_checkpoint -force "$dcp_dir/config_$i/shell_phys_opted_c$i.dcp"

    if {$cfg(build_opt) eq 1} {
        route_design -directive AggressiveExplore
    } else {
        route_design
    }

    if {$cfg(build_opt) eq 1} {
        phys_opt_design -directive AggressiveExplore
    }

    write_checkpoint -force "$dcp_dir/config_$i/shell_routed_c$i.dcp"

    report_utilization -file "$rprt_dir/config_$i/shell_utilization_c$i.rpt"
    report_route_status -file "$rprt_dir/config_$i/shell_route_status_c$i.rpt"
    report_timing_summary -file "$rprt_dir/config_$i/shell_timing_summary_c$i.rpt"
    report_drc -ruledeck bitstream_checks -name cyt_top -file "$rprt_dir/config_$i/shell_drc_bitstream_checks_c$i.rpt"
    close_project
}

########################################################################################################

} errorstring]} {
    puts "[color $clr_error "** CERR: $errorstring"]"
    puts "[color $clr_error "**"]"
    exit 1
}

exit 0